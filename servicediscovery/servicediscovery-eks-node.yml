AWSTemplateFormatVersion: "2010-09-09"
Description: This stack deploys the servicediscovery eks

Parameters:
  NamePrefix:
    Type: String
    Default: "servicediscovery-test"
  ClusterName:
    Type: String
    Default: "servicediscovery-test-EKSCluster"
  # https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/eks-optimized-ami.html
  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.24/amazon-linux-2/recommended/image_id
  # https://aws.amazon.com/jp/ec2/pricing/on-demand/
  NodeInstanceType:
    Type: String
    Default: t2.medium

Resources:
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Path: /
  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole

  # # セキュリティグループ作成
  # NodeSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security group for NodeSecurityGroup
  #     VpcId: { "Fn::ImportValue": !Sub "${NamePrefix}-VpvId" }
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${NamePrefix}-NodeSecurityGroup
  # NodeSecurityGroupIngress:
  #   Type: "AWS::EC2::SecurityGroupIngress"
  #   Properties:
  #     Description: Allow node to communicate with each other
  #     FromPort: 0
  #     GroupId: !Ref NodeSecurityGroup
  #     IpProtocol: "-1"
  #     SourceSecurityGroupId: !Ref NodeSecurityGroup
  #     ToPort: 65535
  # ClusterControlPlaneSecurityGroupIngress:
  #   Type: "AWS::EC2::SecurityGroupIngress"
  #   Properties:
  #     Description: Allow pods to communicate with the cluster API Server
  #     FromPort: 443
  #     GroupId:
  #       {
  #         "Fn::ImportValue": !Sub "${NamePrefix}-ClusterControlPlaneSecurityGroup",
  #       }
  #     IpProtocol: tcp
  #     SourceSecurityGroupId: !Ref NodeSecurityGroup
  #     ToPort: 443
  # ControlPlaneEgressToNodeSecurityGroup:
  #   Type: "AWS::EC2::SecurityGroupEgress"
  #   Properties:
  #     Description: Allow the cluster control plane to communicate with worker Kubelet and pods
  #     DestinationSecurityGroupId: !Ref NodeSecurityGroup
  #     FromPort: 1025
  #     GroupId:
  #       {
  #         "Fn::ImportValue": !Sub "${NamePrefix}-ClusterControlPlaneSecurityGroup",
  #       }
  #     IpProtocol: tcp
  #     ToPort: 65535
  # ControlPlaneEgressToNodeSecurityGroupOn443:
  #   Type: "AWS::EC2::SecurityGroupEgress"
  #   Properties:
  #     Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
  #     DestinationSecurityGroupId: !Ref NodeSecurityGroup
  #     FromPort: 443
  #     GroupId:
  #       {
  #         "Fn::ImportValue": !Sub "${NamePrefix}-ClusterControlPlaneSecurityGroup",
  #       }
  #     IpProtocol: tcp
  #     ToPort: 443
  # NodeSecurityGroupFromControlPlaneIngress:
  #   Type: "AWS::EC2::SecurityGroupIngress"
  #   Properties:
  #     Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
  #     FromPort: 1025
  #     GroupId: !Ref NodeSecurityGroup
  #     IpProtocol: tcp
  #     SourceSecurityGroupId:
  #       {
  #         "Fn::ImportValue": !Sub "${NamePrefix}-ClusterControlPlaneSecurityGroup",
  #       }
  #     ToPort: 65535
  # NodeSecurityGroupFromControlPlaneOn443Ingress:
  #   Type: "AWS::EC2::SecurityGroupIngress"
  #   Properties:
  #     Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
  #     FromPort: 443
  #     GroupId: !Ref NodeSecurityGroup
  #     IpProtocol: tcp
  #     SourceSecurityGroupId:
  #       {
  #         "Fn::ImportValue": !Sub "${NamePrefix}-ClusterControlPlaneSecurityGroup",
  #       }
  #     ToPort: 443

  NodeLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 10
              VolumeType: gp3
        ImageId: !Ref NodeImageIdSSMParam
        InstanceType: !Ref NodeInstanceType
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpEndpoint: enabled
          HttpTokens: optional

  ManagedNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      NodegroupName: !Sub ${ClusterName}-NodeGroup
      ClusterName: !Sub ${ClusterName}
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Labels:
        alpha.eksctl.io/cluster-name: !Sub ${ClusterName}
        alpha.eksctl.io/nodegroup-name: !Sub ${ClusterName}-NodeGroup
      Tags:
        alpha.eksctl.io/nodegroup-name: !Sub ${ClusterName}-NodeGroup
        alpha.eksctl.io/nodegroup-type: "managed"
      Subnets:
        - { "Fn::ImportValue": !Sub "${NamePrefix}-PublicOneSubnet" }
        - { "Fn::ImportValue": !Sub "${NamePrefix}-PublicTwoSubnet" }
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 1

Outputs:
  # NodeSecurityGroup:
  #   Description: The security group for the node group
  #   Value: !Ref NodeSecurityGroup
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
  ManagedNodeGroup:
    Description: The ManagedNodeGroup
    Value: !Ref ManagedNodeGroup
